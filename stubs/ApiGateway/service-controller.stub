<?php

namespace App\Http\Controllers;

use Illuminate\Http\JsonResponse;
use Jose1805\LaravelMicroservices\Models\Service;
use Jose1805\LaravelMicroservices\Traits\ApiResponser;
use Illuminate\Http\Request;

class $CLASS_NAME$Controller extends Controller
{
    use ApiResponser;

    /**
     * Objeto para consumir servicio
     *
     * @var Service
     */
    public $microservice;

    public function __construct()
    {
        $this->microservice = Service::where('name', '$MICROSERVICE_NAME$')->first();
        $this->middleware('auth:sanctum');
        //$this->middleware('permission:name')->only(['func']);
    }

    /**
     * Lista de elementos del servicio
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function index(Request $request) : JsonResponse
    {
        $this->microservice->user_id = $request->user() ? $request->user()->id : null;
        $response = $this->microservice->getElements($request->all());

        return $this->generateResponseByService($response);
    }

    /**
     * Registro de un nuevo elemento en el servicio
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function store(Request $request) : JsonResponse
    {
        $this->microservice->user_id = $request->user() ? $request->user()->id : null;
        $response = $this->microservice->createElement($request->all());
        return $this->generateResponseByService($response);

        // $this->microservice->user_id = $request->user() ? $request->user()->id : null;
        // Ejemplo de ejecuciÃ³n en segundo plano
        // return $this->microservice->resolveInBackground($request, 'create_element');
    }

    /**
     * Obtiene el recurso especificado
     *
     * @param  int  $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function show(Request $request, $id) : JsonResponse
    {
        $this->microservice->user_id = $request->user() ? $request->user()->id : null;
        $response = $this->microservice->getElement($id);
        return $this->generateResponseByService($response);
    }

    /**
     * Actualiza el recurso especificado
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function update(Request $request, $id) : JsonResponse
    {
        $this->microservice->user_id = $request->user() ? $request->user()->id : null;
        $response = $this->microservice->updateElement($id, $request->all());
        return $this->generateResponseByService($response);

        //$this->microservice->user_id = $request->user() ? $request->user()->id : null;
        //$request->merge(['id' => $id]);
        //return $this->microservice->resolveInBackground($request, 'update_element');
    }

    /**
     * Elimina el recurso especificado
     *
     * @param  int  $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy(Request $request, $id) : JsonResponse
    {
        $this->microservice->user_id = $request->user() ? $request->user()->id : null;
        $response = $this->microservice->destroyElement($id);
        return $this->generateResponseByService($response);

        //$this->microservice->user_id = $request->user() ? $request->user()->id : null;
        //$request->merge(['id' => $id]);
        //return $this->microservice->resolveInBackground($request, 'delete_element');
    }
}
